// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  password  String
  role      UserRole @default(USER)
  forgotPasswordToken  String?   // Add this
  forgotPasswordExpiry DateTime? // And this
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems      Problem[]
  Submission    Submission[]
  ProblemSolved ProblemSolved[]
  playlists Playlist[]
}

enum Difficutly {
  Easy
  Medium
  Hard
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficutly
  tags        String[] // ["tag1", "tag2", "tag3"]
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases          Json // 
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //  Relationship
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission Submission[]
  solvedBy   ProblemSolved[]
  problemsPlaylist ProblemInPlayList[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // Accepted , wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}


model Playlist {
  id String @id @default(uuid())
  name String
  description String?
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problems ProblemInPlayList[]
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([name,userId])
}
model ProblemInPlayList {
  id String @id @default(uuid())
  playlistId String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  playlist Playlist @relation(fields:[playlistId],references:[id],onDelete:Cascade)
  problem Problem @relation(fields:[problemId],references:[id],onDelete:Cascade)
  @@unique([playlistId,problemId]) 

}